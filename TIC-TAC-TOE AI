import math

# Constants for players
PLAYER_X = 'X'
PLAYER_O = 'O'
EMPTY = ' '

# Function to display the board
def print_board(board):
    for row in board:
        print('|'.join(row))
        print('-' * 5)

# Check if the game is over
def is_game_over(board):
    # Check rows, columns, and diagonals for a win
    for row in board:
        if row.count(row[0]) == 3 and row[0] != EMPTY:
            return row[0]
    
    for col in range(3):
        if board[0][col] == board[1][col] == board[2][col] and board[0][col] != EMPTY:
            return board[0][col]
    
    if board[0][0] == board[1][1] == board[2][2] and board[0][0] != EMPTY:
        return board[0][0]
    
    if board[0][2] == board[1][1] == board[2][0] and board[0][2] != EMPTY:
        return board[0][2]
    
    # Check for a draw
    if all(cell != EMPTY for row in board for cell in row):
        return 'Draw'
    
    return None

# Minimax algorithm
def minimax(board, depth, is_maximizing):
    winner = is_game_over(board)
    if winner == PLAYER_O:
        return 1  # O is the AI (maximizing player)
    elif winner == PLAYER_X:
        return -1  # X is the human (minimizing player)
    elif winner == 'Draw':
        return 0
    
    if is_maximizing:
        best_score = -math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == EMPTY:
                    board[i][j] = PLAYER_O
                    score = minimax(board, depth + 1, False)
                    board[i][j] = EMPTY
                    best_score = max(score, best_score)
        return best_score
    else:
        best_score = math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == EMPTY:
                    board[i][j] = PLAYER_X
                    score = minimax(board, depth + 1, True)
                    board[i][j] = EMPTY
                    best_score = min(score, best_score)
        return best_score

# Best move for the AI
def best_move(board):
    best_score = -math.inf
    move = (-1, -1)
    
    for i in range(3):
        for j in range(3):
            if board[i][j] == EMPTY:
                board[i][j] = PLAYER_O
                score = minimax(board, 0, False)
                board[i][j] = EMPTY
                if score > best_score:
                    best_score = score
                    move = (i, j)
    return move

# Main game loop
def play_game():
    board = [[EMPTY for _ in range(3)] for _ in range(3)]
    print_board(board)
    
    while True:
        # Human player's turn
        try:
            row = int(input("Enter row (0, 1, 2): "))
            col = int(input("Enter column (0, 1, 2): "))
            if board[row][col] != EMPTY:
                print("Cell already taken! Try again.")
                continue
            board[row][col] = PLAYER_X
            
            winner = is_game_over(board)
            if winner:
                print_board(board)
                print(f"Game over! Winner: {winner}")
                break
            
            # AI's turn
            print("AI's turn:")
            ai_move = best_move(board)
            board[ai_move[0]][ai_move[1]] = PLAYER_O
            
            winner = is_game_over(board)
            if winner:
                print_board(board)
                print(f"Game over! Winner: {winner}")
                break
            
            print_board(board)
        except (ValueError, IndexError):
            print("Invalid input! Please enter row and column as 0, 1, or 2.")

# Start the game
if __name__ == "__main__":
    play_game()
